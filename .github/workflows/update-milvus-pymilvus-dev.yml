name: Update PyMilvus in Milvus

on:
  schedule:
    - cron: "5 2 * * *"  # daily at 02:05 UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue with other branches even if one fails
      matrix:
        # branch: [master, '2.5', '2.6'] # wait for milvus valid 2.6 branch
        branch: [master, '2.5']
    steps:
    - name: Checkout pymilvus (repo root for workflow)
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}
    - name: Get history and tags for SCM versioning
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Checkout Milvus (upstream)
      uses: actions/checkout@v4
      with:
        repository: milvus-io/milvus
        ref: ${{ matrix.branch }}
        path: milvus-upstream
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Determine latest dev version
      id: version
      run: |
        python -m pip install setuptools_scm --user
        VERSION=$(python -c "import _version_helper; print(_version_helper.version)")
        echo "latest=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Read current pinned version in Milvus
      id: current
      run: |
        set -euo pipefail
        file="milvus-upstream/tests/python_client/requirements.txt"
        if [ ! -f "$file" ]; then
          echo "Requirements file not found: $file"
          echo "current=not-found" >> $GITHUB_OUTPUT
          exit 0
        fi
        curr="$(grep -E '^pymilvus(\[bulk_writer\])?==' "$file" | head -n1 | awk -F'==' '{print $2}')" || curr="not-found"
        echo "found=$curr"
        echo "current=$curr" >> $GITHUB_OUTPUT

    - name: Skip if up-to-date
      if: steps.current.outputs.current == steps.version.outputs.latest
      run: echo "Already up-to-date. Skipping."

    - name: Prepare branch
      if: steps.current.outputs.current != steps.version.outputs.latest
      run: |
        set -euo pipefail
        cd milvus-upstream
        git config user.name "${{ vars.GIT_AUTHOR_NAME }}"
        git config user.email "${{ vars.GIT_AUTHOR_EMAIL }}"
        # Create unique branch name with target branch reference
        TARGET_BRANCH="$(echo '${{ matrix.branch }}' | sed 's/\./-/g')"
        BR="bot/pymilvus-update-for-${TARGET_BRANCH}-${{ steps.version.outputs.latest }}-$(date -u +%Y%m%d%H%M%S)"
        echo "BRANCH=$BR" >> $GITHUB_ENV
        git switch -c "$BR"

    - name: Update requirements.txt
      if: steps.current.outputs.current != steps.version.outputs.latest
      run: |
        set -euo pipefail
        file="milvus-upstream/tests/python_client/requirements.txt"
        ver="${{ steps.version.outputs.latest }}"
        # Replace exact pins for both lines
        sed -i -E "s/^pymilvus==[0-9A-Za-z\.\-]+/pymilvus==${ver}/" "$file"
        sed -i -E "s/^pymilvus\[bulk_writer\]==[0-9A-Za-z\.\-]+/pymilvus[bulk_writer]==${ver}/" "$file"
        echo "Updated to $ver"
        grep -nE '^pymilvus(\[bulk_writer\])?==' "$file" || true

    - name: Commit
      if: steps.current.outputs.current != steps.version.outputs.latest
      run: |
        set -euo pipefail
        cd milvus-upstream
        git add tests/python_client/requirements.txt
        git commit -m "test: Increase PyMilvus version to ${{ steps.version.outputs.latest }}"

    - name: Push to fork
      if: steps.current.outputs.current != steps.version.outputs.latest
      env:
      run: |
        set -euo pipefail
        cd milvus-upstream
        remote="https://x-access-token:${{ secrets.MILVUS_UPDATE_TOKEN }}@github.com/${{ vars.REPO_FORK }}.git"
        git remote add fork "$remote" || git remote set-url fork "$remote"
        git push -u fork "$BRANCH"

    - name: Open PR to milvus-io/milvus
      if: steps.current.outputs.current != steps.version.outputs.latest
      env:
        GH_TOKEN: ${{ secrets.MILVUS_UPDATE_TOKEN }}
      run: |
        set -euo pipefail
        title="test: Increase PyMilvus version to ${{ steps.version.outputs.latest }} for ${{ matrix.branch }} branch"
        body="Automated daily bump from pymilvus ${{ matrix.branch }} branch. Updates tests/python_client/requirements.txt."
        head="$(echo ${{ vars.REPO_FORK }} | cut -d'/' -f2):${BRANCH}"
        base="${{ matrix.branch }}"
        gh pr create --repo milvus-io/milvus --title "$title" --body "$body" --head "$head" --base "$base"
